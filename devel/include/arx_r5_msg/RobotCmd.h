// Generated by gencpp from file arx_r5_msg/RobotCmd.msg
// DO NOT EDIT!


#ifndef ARX_R5_MSG_MESSAGE_ROBOTCMD_H
#define ARX_R5_MSG_MESSAGE_ROBOTCMD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace arx_r5_msg
{
template <class ContainerAllocator>
struct RobotCmd_
{
  typedef RobotCmd_<ContainerAllocator> Type;

  RobotCmd_()
    : header()
    , end_pos()
    , joint_pos()
    , gripper(0.0)
    , mode(0)  {
      end_pos.assign(0.0);

      joint_pos.assign(0.0);
  }
  RobotCmd_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , end_pos()
    , joint_pos()
    , gripper(0.0)
    , mode(0)  {
  (void)_alloc;
      end_pos.assign(0.0);

      joint_pos.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef boost::array<double, 6>  _end_pos_type;
  _end_pos_type end_pos;

   typedef boost::array<double, 6>  _joint_pos_type;
  _joint_pos_type joint_pos;

   typedef double _gripper_type;
  _gripper_type gripper;

   typedef int64_t _mode_type;
  _mode_type mode;





  typedef boost::shared_ptr< ::arx_r5_msg::RobotCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arx_r5_msg::RobotCmd_<ContainerAllocator> const> ConstPtr;

}; // struct RobotCmd_

typedef ::arx_r5_msg::RobotCmd_<std::allocator<void> > RobotCmd;

typedef boost::shared_ptr< ::arx_r5_msg::RobotCmd > RobotCmdPtr;
typedef boost::shared_ptr< ::arx_r5_msg::RobotCmd const> RobotCmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arx_r5_msg::RobotCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arx_r5_msg::RobotCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::arx_r5_msg::RobotCmd_<ContainerAllocator1> & lhs, const ::arx_r5_msg::RobotCmd_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.end_pos == rhs.end_pos &&
    lhs.joint_pos == rhs.joint_pos &&
    lhs.gripper == rhs.gripper &&
    lhs.mode == rhs.mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::arx_r5_msg::RobotCmd_<ContainerAllocator1> & lhs, const ::arx_r5_msg::RobotCmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace arx_r5_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::arx_r5_msg::RobotCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arx_r5_msg::RobotCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arx_r5_msg::RobotCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arx_r5_msg::RobotCmd_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arx_r5_msg::RobotCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arx_r5_msg::RobotCmd_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arx_r5_msg::RobotCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "547e6ecc540b9df32417036b604fe3df";
  }

  static const char* value(const ::arx_r5_msg::RobotCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x547e6ecc540b9df3ULL;
  static const uint64_t static_value2 = 0x2417036b604fe3dfULL;
};

template<class ContainerAllocator>
struct DataType< ::arx_r5_msg::RobotCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arx_r5_msg/RobotCmd";
  }

  static const char* value(const ::arx_r5_msg::RobotCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arx_r5_msg::RobotCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"float64[6] end_pos # x y z w x y z\n"
"\n"
"float64[6] joint_pos\n"
"\n"
"float64 gripper\n"
"\n"
"int64 mode\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::arx_r5_msg::RobotCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arx_r5_msg::RobotCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.end_pos);
      stream.next(m.joint_pos);
      stream.next(m.gripper);
      stream.next(m.mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arx_r5_msg::RobotCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arx_r5_msg::RobotCmd_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "end_pos[]" << std::endl;
    for (size_t i = 0; i < v.end_pos.size(); ++i)
    {
      s << indent << "  end_pos[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.end_pos[i]);
    }
    s << indent << "joint_pos[]" << std::endl;
    for (size_t i = 0; i < v.joint_pos.size(); ++i)
    {
      s << indent << "  joint_pos[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_pos[i]);
    }
    s << indent << "gripper: ";
    Printer<double>::stream(s, indent + "  ", v.gripper);
    s << indent << "mode: ";
    Printer<int64_t>::stream(s, indent + "  ", v.mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARX_R5_MSG_MESSAGE_ROBOTCMD_H
